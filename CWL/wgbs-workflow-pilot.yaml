cwlVersion: "cwl:draft-3"
#cwlVersion: "v1.0"

class: Workflow

requirements:
  - class: ScatterFeatureRequirement
  - class: InlineJavascriptRequirement
    expressionLib:
    - "var new_ext = function() { var ext=inputs.bai?'.bai':inputs.csi?'.csi':'.bai'; return inputs.input.path.split('/').slice(-1)[0]+ext; };"
  - class: StepInputExpressionRequirement
  - class: MultipleInputFeatureRequirement
  - class: SubworkflowFeatureRequirement
  
inputs:
  - id: inp_read1
    type:
      type: array
      items: File
  - id: inp_read2
    type:
      type: array
      items: File
  - id: fastq_batch_size
    type: int
  - id: reference_fasta
    #type: File
    type: string
  - id: trimmomatic_adapters_file
    type: File
  - id: illuminaclip
    type: string
  - id: trimmomatic_phred
    type: string
  - id: trimmomatic_leading
    type: int
  - id: trimmomatic_trailing
    type: int
  - id: trimmomatic_crop
    type: int
  - id: trimmomatic_headcrop
    type: int
  - id: trimmomatic_minlen
    type: int
  - id: trimmomatic_avgqual
    type: int
  - id: pileometh_ot
    type: string
  - id: pileometh_ob
    type: string
  - id: pileometh_ctot
    type: string
  - id: pileometh_ctob
    type: string
  - id: pileometh_not
    type: string
  - id: pileometh_nob
    type: string
  - id: pileometh_nctot
    type: string
  - id: pileometh_nctob
    type: string
  - id: temp_dir
    type: string    
  - id: trimmomatic_jar_file
    type: string    
#  - id: test_bam
#    type: File
#  - id: slidingw
#    type: string
#    default: "30"
#  - id: minl
#    type: int
#    default: 20

outputs:
  - id: sequence_files_read1
    type: 
      type: array
      items: Any
    #source: "#split_read1_files/output"
    source: "#adaptor_trimming/output_read1_trimmed_file"
      
  - id: sequence_files_read2
    type: 
      type: array
      items: Any
    #source: "#split_read2_files/output"
    source: "#adaptor_trimming/output_read2_trimmed_paired_file"
  
  - id: trimming_report
    type:
      type: array
      items: ['null', File]
    source: "#adaptor_trimming/output_log_file"
      
  - id: alignment
    type: 
      type: array
      items: File
    source: "#alignment/alignment"
    
  - id: alignment_flagstat
    type:
      type: array
      items: File
    source: "#flag_stat_aligned/output"
    
#  - id: merged_bam
#    type: File
#    source: "#bam_merging/mergeSam_output"
  
  - id: indexed_bam
    type: 
      type: array
      items: File
    source: "#index_bam_file/index"
  
  - id: duplicate_removed
    type: 
      type: array
      items: File
    source: "#duplicates_removal/markDups_output"
 
  - id: duplicate_removed_flagstat
    type:
      type: array
      items: File
    source: "#flag_stat_dup_removed/output"
      
  - id: mbias_file
    type:
      type: array
      items:
        type: array
        items: File
    source: "#mbias_calculation/mbias_file"
      
  - id: converted_bam
    type: 
      type: array
      items: File
    source: "#sam_to_bam/output"
              
  - id: split_by_chromosome
    type:
      type: array
      items: 
        type: array
        items: File
    source: "#split_by_chromosome/output_bam_files"
    
    
  - id: fixed_bams
    type: 
      type: array
      items: 
        type: array
        items: File
    source: "#fix_all_bams/array_of_fixed_bams"
    
  - id: rearranged_bams
    type: 
      type: array
      items: 
        type: array
        items: File
    source: "#rearrange_bams/bam_arrays_per_chr"

  - id: merged_bam
    type: 
      type: array
      items: File
    source: "#bam_merging/mergeSam_output"

  - id: methylation_calls_simple
    type:
      type: array
      items: File 
    source: "#methylation_calling/methcall_bed"

  - id: methylation_calls
    type: File
    source: "#merge_meth_calls/merged_bed_file"
  
#  - id: lambda_bam_file
#    type: File
#    source: "#find_lambda_file/lambda_bam"

  - id: methylation_calls_lambda
    type: File
    source: "#methylation_calling_lambda/methcall_bed"
    
  - id: bisulfite_conversion_estimation
    type: File
    source: "#conversion_estimation_lambda/bisulfite_conversion_file"
#  
steps:
  - id: split_read1_files
    run: "tools/split-compressed-files.yml"
    scatter: "#split_read1_files/file"
    inputs:
      - {id: file, source: "#inp_read1" }
      - id: size
        source: "#fastq_batch_size"
        valueFrom: $(self * 4)
      - id: suffix
        source: "#inp_read1"
        valueFrom: _$(inputs.file.basename.substr(0,inputs.file.basename.lastIndexOf('.fastq')))_$(inputs.size/1000)k_R1.fastq
    outputs:
      - {id: output}
      
  - id: split_read2_files
    run: "tools/split-compressed-files.yml"
    scatter: "#split_read2_files/file"
    inputs:
      - {id: file, source: "#inp_read2"}
      - id: size
        source: "#fastq_batch_size"
        valueFrom: $(self * 2)
      - id: suffix
        source: "#inp_read2"
        valueFrom: _$(inputs.file.basename.substr(0,inputs.file.basename.lastIndexOf('.fastq')))_$(inputs.size/1000)k_R2.fastq
    outputs:
      - {id: output}
   
  - id: flatten1
    run: "tools/flatten_fastq_arrays.yml"
    inputs:
      - { id: fastq_arrays, source: "#split_read1_files/output"}
    outputs:  
      - { id: flattened_fastq_array }
      
  - id: flatten2
    run: "tools/flatten_fastq_arrays.yml"
    inputs:
      - { id: fastq_arrays, source: "#split_read2_files/output"}
    outputs:  
      - { id: flattened_fastq_array }    
      
  - id: adaptor_trimming
    run: "tools/trimmomatic.yml"
    scatter: [ "#adaptor_trimming/input_read1_fastq_file", "#adaptor_trimming/input_read2_fastq_file" ]
    scatterMethod: 'dotproduct'
    inputs:
      - { id: input_read1_fastq_file, source: "#flatten1/flattened_fastq_array" }
      - { id: input_read2_fastq_file, source: "#flatten2/flattened_fastq_array" } 
      - { id: java_opts, default: "-XX:-UseCompressedClassPointers -Xmx512M -verbose"}
      - { id: trimmomatic_jar_path, source: "#trimmomatic_jar_file"}
      - { id: end_mode, default: 'PE'}
      - { id: input_adapters_file, source: "#trimmomatic_adapters_file" }
      - { id: phred, source: "#trimmomatic_phred"}
      - { id: illuminaclip, source: "#illuminaclip"}
      - { id: leading, source: "#trimmomatic_leading"}
      - { id: trailing, source: "#trimmomatic_trailing"}
      - { id: crop, source: "#trimmomatic_crop"}
      - { id: headcrop, source: "#trimmomatic_headcrop"}
      - { id: minlen, source: "#trimmomatic_minlen"}
      - { id: avgqual, source: "#trimmomatic_avgqual"}
      - id: log_filename
        source: "#flatten1/flattened_fastq_array" 
        valueFrom: $(inputs.input_read1_fastq_file.basename.substr(0, inputs.input_read1_fastq_file.basename.lastIndexOf('.')))_trimming.log
    outputs:
      - { id: output_read1_trimmed_file }
      - { id: output_read2_trimmed_paired_file }
      - { id: output_log_file }
      
  - id: alignment
    run: "tools/bwameth.yml"
    scatter: [ "#alignment/read1", "#alignment/read2" ]
    scatterMethod: 'dotproduct'
    inputs:
     # - { id: threads, default: '1'}
      - { id: reference, source: "#reference_fasta" }
      - { id: read1, source: "#adaptor_trimming/output_read1_trimmed_file" }
      - { id: read2, source: "#adaptor_trimming/output_read2_trimmed_paired_file" }
      - id: alignment_filename
        source: "#adaptor_trimming/output_read1_trimmed_file"
        valueFrom: $(inputs.read1.basename.substr(0, inputs.read1.basename.lastIndexOf('.')))
        #valueFrom: $(self.basename + ".sam")
    outputs:
      - { id: alignment }
      
  - id: flag_stat_aligned
    run: "tools/samtools-flagstat.yml"
    scatter: "#flag_stat_aligned/input_bam_file"
    inputs:
      - { id: input_bam_file, source: "#alignment/alignment"}
    outputs:
      - { id: output }

  - id: sam_to_bam
    run: "tools/samtools-view.yml"
    scatter: "#sam_to_bam/input"
    inputs:
      - { id: input, source: "#alignment/alignment" }
      - { id: isbam, default: "true"}
      - id: output_name
        source: "#alignment/alignment"
        valueFrom:  $(inputs.input.basename.substr(0, inputs.input.basename.lastIndexOf('.'))).bam
    outputs:
      - { id: output }
      
  - id: split_by_chromosome
    run: "tools/bamtools-split.yml"
    scatter: "#split_by_chromosome/input_bam_file"
    inputs:
      #- { id: input_bam_file, source: "#duplicates_removal/markDups_output" }
      #- { id: input_bam_file, source: "#bam_merging/mergeSam_output" }
      - { id: input_bam_file, source: "#sam_to_bam/output" }
      - { id: split_options, default: "reference" }
      - { id: ref_prefix, default: "chr" }
    outputs:
      - { id: output_bam_files }
#      
#  - id: fix_bams
#    run: "tools/fix-bam-file.yml"
#    scatter: "#fix_bams/inputBAMFile"
#    inputs:
#      - id: inputBAMFile
#        source: "#split_by_chromosome/output_bam_files"
#      - id: outputFileName
#        source: "#split_by_chromosome/output_bam_files"
#        valueFrom: $(inputs.inputBAMFile.basename + '.fixed').bam
#    outputs:
#      - { id: fixBam_output }

  - id: fix_all_bams
    run: "tools/fix-all-bam-files.yml"
    scatter: "#fix_all_bams/array_of_bams"
    inputs:
      - id: array_of_bams
        source: "#split_by_chromosome/output_bam_files"
#        valueFrom: $([self])
    outputs: 
      - { id: array_of_fixed_bams }
     
  - id: rearrange_bams
    run: "tools/rearrange_bams.yml"
    inputs:
      - id: bam_arrays
        source: "#fix_all_bams/array_of_fixed_bams"
    outputs:
      - { id: bam_arrays_per_chr }
      - { id: chrom_names}

  - id: bam_merging
    run: "tools/picard-MergeSamFiles.yml"
    scatter: [ "#bam_merging/inputFileName_mergedSam", "#bam_merging/outputFileName_mergedSam" ]
    scatterMethod: 'dotproduct'
    inputs:
      - id: inputFileName_mergedSam 
#        source: "#fix_bams/fixBam_output"
        source: "#rearrange_bams/bam_arrays_per_chr"
      - id: outputFileName_mergedSam
        source: "#rearrange_bams/chrom_names"
        valueFrom: $(self)_merged.bam
    # - { id: tmpdir, valueFrom: $(runtime.tmpdir)} # does not work due to some reason
      - { id: tmpdir, source: "#temp_dir"}
      - { id: createIndex, default: "true" }
    outputs:
      - { id: mergeSam_output } 
      
  - id: index_bam_file
    run: "tools/samtools-index.yml"
    scatter: "#index_bam_file/input"
    inputs:
      - { id: input, source: "#bam_merging/mergeSam_output" }
      #- { id: bai, valueFrom: $(Boolean(1)) }
      - { id: bai, default: true }
    outputs:
      - { id: index }

#### OLD MERGING                  
#  - id: bam_merging
#    run: "tools/picard-MergeSamFiles.yml"
#    inputs:
#      - id: inputFileName_mergedSam 
#        source: "#alignment/alignment"
#      - { id: outputFileName_mergedSam, default: "merged_alignment.bam"}
#     # - { id: tmpdir, valueFrom: $(runtime.tmpdir)} # does not work due to some reason
#      - { id: tmpdir, default: "/ngs_share/tmp/"}
#      - { id: createIndex, default: "true" }
#    outputs:
#      - { id: mergeSam_output }
#                  
#  - id: duplicates_removal
#    run: "tools/picard-MarkDuplicates.yml"
#    inputs:
#      - id: inputFileName_markDups
#        source: "#bam_merging/mergeSam_output"
#        valueFrom: $([self])
#      - { id: outputFileName_markDups, valueFrom: "merged_alignment.bam" }
#      #- { id: tmpdir, valueFrom: $(runtime.tmpdir) }
#      - { id: tmpdir, valueFrom: "/ngs_share/tmp/"}
#      - { id: removeDuplicates, valueFrom: "true" }
#      - { id: createIndex, valueFrom: "true" }
#      - { id: metricsFile, valueFrom: "duplicate_metrics.txt"}
#    outputs:
#      - { id: markDups_output }

  - id: duplicates_removal
    run: "tools/picard-MarkDuplicates.yml"
    scatter: "#duplicates_removal/inputFileName_markDups"
    inputs:
      - id: inputFileName_markDups
        #source: "#split_by_chromosome/output_bam_files"
        #source: "#fix_bams/fixBam_output"
        source: "#bam_merging/mergeSam_output"
        valueFrom: $([self])
      - id: outputFileName_markDups
        #source: "#split_by_chromosome/output_bam_files"
        source: "#bam_merging/mergeSam_output"
        valueFrom: $(inputs.inputFileName_markDups.basename.substr(0, inputs.inputFileName_markDups.basename.lastIndexOf('.')))_dupl_removed.bam
      - { id: tmpdir, source: "#temp_dir" }
      - { id: removeDuplicates, default: "true" }
      - id: metricsFile
        source: "#bam_merging/mergeSam_output"
        valueFrom: $(inputs.inputFileName_markDups.basename.substr(0, inputs.inputFileName_markDups.basename.lastIndexOf('.')))_duplicate_metrics.txt
      - { id: createIndex, default: "true" }
    outputs:
      - { id: markDups_output }
      
  - id: flag_stat_dup_removed
    run: "tools/samtools-flagstat.yml"
    scatter: "#flag_stat_dup_removed/input_bam_file"
    inputs:
      - { id: input_bam_file, source: "#duplicates_removal/markDups_output"}
    outputs:
      - { id: output }    
      
  - id: mbias_calculation
    run: "tools/pileometh-mbias.yml"
    scatter: "#mbias_calculation/bam_file"
    inputs:
      - { id: bam_file, source: "#duplicates_removal/markDups_output" }#"#bam_merging/mergeSam_output"
#      - { id: bam_file, source: "#bam_merging/mergeSam_output" }
      - id: reference
        source: "#reference_fasta"
      - id: mbiasfile_name
        source: "#duplicates_removal/markDups_output"
        valueFrom: $(inputs.bam_file.basename.substr(0, inputs.bam_file.basename.lastIndexOf('.')))_mbias
    outputs:
      - { id: mbias_file }

  - id: methylation_calling
    run: "tools/pileometh-extract.yml"
    scatter: "#methylation_calling/bam_file"
    inputs:
      #- { id: bam_file, source: "#duplicates_removal/markDups_output" }
      - id: bam_file
        #source: "#split_by_chromosome/output_bam_files"
        source: "#duplicates_removal/markDups_output"
      - id: bedfile_name
        #source: "#split_by_chromosome/output_bam_files"
        source: "#duplicates_removal/markDups_output"
        valueFrom: $(inputs.bam_file.basename.substr(0, inputs.bam_file.basename.lastIndexOf('.')))        
      - id: reference
        source: "#reference_fasta"
      #- { id: noCG, valueFrom: $(Boolean(0)) }
      - { id: noCG, default: false }
      - { id: OT, source: "#pileometh_ot"}
      - { id: OB,  source: "#pileometh_ob"}
      - { id: CTOT,  source: "#pileometh_ctot"}
      - { id: CTOB,  source: "#pileometh_ctob"}
      - { id: nOT, source: "#pileometh_not"}
      - { id: nOB,  source: "#pileometh_nob"}
      - { id: nCTOT,  source: "#pileometh_nctot"}
      - { id: nCTOB,  source: "#pileometh_nctob"}
    outputs:
      - { id: methcall_bed }

  - id: merge_meth_calls
    run: "tools/methcall-merger.yml"
    inputs:
      - { id: input_bed_files, source: "#methylation_calling/methcall_bed" }
      - { id: output_file_name, default: "methylation_calls_CpG.bedGraph" }
    outputs:
      - { id: merged_bed_file}
   
  - id: find_lambda_file
    run: "tools/find_lambda.yml"
    inputs:
      - { id: split_files, source: "#duplicates_removal/markDups_output" }
    outputs:
      - { id: lambda_bam }      
            
  - id: methylation_calling_lambda
    run: "tools/pileometh-extract.yml"
    inputs:
      - id: reference
        source: "#reference_fasta"
#        valueFrom: $(self)
#      - id: noCG
#        valueFrom: $(Boolean(1))
      - { id: noCG, default: true }
      - { id: bedfile_name, default: "lambda"}
      - { id: OT, source: "#pileometh_ot"}
      - { id: OB,  source: "#pileometh_ob"}
      - { id: CTOT,  source: "#pileometh_ctot"}
      - { id: CTOB,  source: "#pileometh_ctob"}
      - { id: nOT, source: "#pileometh_not"}
      - { id: nOB,  source: "#pileometh_nob"}
      - { id: nCTOT,  source: "#pileometh_nctot"}
      - { id: nCTOB,  source: "#pileometh_nctob"}
      - id: bam_file
        source: "#find_lambda_file/lambda_bam"
#      - id: bam_file
#        source: "#test_bam"
#        valueFrom: $([self])
#      - { id: bam_file, source: "#duplicates_removal/markDups_output" }
    outputs:
      - { id: methcall_bed }
#    
  - id: conversion_estimation_lambda
    run: "tools/bisulfite-conversion-lambda.yml"
    inputs:
      - { id: input_bed_file, source: "#methylation_calling_lambda/methcall_bed" }
      - { id: output_file_name, default: "bisulfite_conversion.txt" }
    outputs:
      - { id: bisulfite_conversion_file }