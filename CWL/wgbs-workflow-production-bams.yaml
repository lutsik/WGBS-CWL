cwlVersion: "cwl:draft-3"
#cwlVersion: "v1.0"

class: Workflow

requirements:
  - class: ScatterFeatureRequirement
  - class: InlineJavascriptRequirement
    expressionLib:
    - "var new_ext = function() { var ext=inputs.bai?'.bai':inputs.csi?'.csi':'.bai'; return inputs.input.split('/').slice(-1)[0]+ext; };"
    - "var prepend = function(array,prefix) {  var file_array = []; for(var i=0; i<array.length; i++){ file_array[i] = prefix + '/' + array[i]; } return file_array; };"
  - class: StepInputExpressionRequirement
  - class: MultipleInputFeatureRequirement
  - class: SubworkflowFeatureRequirement

inputs:
  - id: analysis_dir
    type: string
  - id: input_bam_files
    type:
      type: array
      items: string
  - id: fastq_batch_size
    type: int
  - id: reference_fasta
    #type: File
    type: string
  - id: max_reads
    type: int
  - id: chromosomes
    type:
      type: array
      items: string
  - id: chr_prefix
    type: string
  - id: trimmomatic_adapters_file
    type: string
  - id: illuminaclip
    type: string
  - id: trimmomatic_phred
    type: string
  - id: trimmomatic_leading
    type: int
  - id: trimmomatic_trailing
    type: int
  - id: trimmomatic_crop
    type: int
  - id: trimmomatic_headcrop
    type: int
  - id: trimmomatic_tailcrop
    type: int
  - id: trimmomatic_minlen
    type: int
  - id: trimmomatic_avgqual
    type: int
  - id: pileometh_ot
    type: string
  - id: pileometh_ob
    type: string
  - id: pileometh_ctot
    type: string
  - id: pileometh_ctob
    type: string
  - id: pileometh_not
    type: string
  - id: pileometh_nob
    type: string
  - id: pileometh_nctot
    type: string
  - id: pileometh_nctob
    type: string
  - id: temp_dir
    type: string
  - id: trimmomatic_jar_file
    type: string
  - id: clean_raw_fastqs
    type: boolean
  - id: clean_trimmed_fastqs
    type: boolean
  - id: clean_primary_sams
    type: boolean
  - id: clean_primary_bams
    type: boolean
  - id: clean_chr_bams
    type: boolean
  - id: clean_merged_bams
    type: boolean
  - id: clean_dup_rm_bams
    type: boolean 
#  - id: test_bam
#    type: File
#  - id: slidingw
#    type: string
#    default: "30"
#  - id: minl
#    type: int
#    default: 20

outputs:
#  - id: sequence_files_read1
#    type: 
#      type: array
#      items: Any
#    #source: "#split_read1_files/output"
#    source: "#adaptor_trimming/output_read1_trimmed_file"
#      
#  - id: sequence_files_read2
#    type: 
#      type: array
#      items: Any
#    #source: "#split_read2_files/output"
#    source: "#adaptor_trimming/output_read2_trimmed_paired_file"
#  
#  - id: trimming_report
#    type:
#      type: array
#      items: ['null', File]
#    source: "#adaptor_trimming/output_log_file"
#      
#  - id: alignment
#    type: 
#      type: array
#      items: File
#    source: "#alignment/alignment"
#    
  - id: alignment_flagstat
    type:
      type: array
      items: string
    source: "#flag_stat_aligned/output"
#    
##  - id: merged_bam
##    type: File
##    source: "#bam_merging/mergeSam_output"
#  
#  - id: indexed_bam
#    type: 
#      type: array
#      items: File
#    source: "#index_bam_file/index"
#  
#  - id: duplicate_removed
#    type: 
#      type: array
#      items: File
#    source: "#duplicates_removal/markDups_output"
# 
#  - id: duplicate_removed_flagstat
#    type:
#      type: array
#      items: File
#    source: "#flag_stat_dup_removed/output"
#      
  - id: mbias_file
    type:
      type: array
      items:
        type: array
        items: File
    source: "#mbias_calculation/mbias_file"

  - id: mbias_file_trimmed
    type:
      type: array
      items:
        type: array
        items: File
    source: "#mbias_calculation_trimmed/mbias_file"

#      
#  - id: converted_bam
#    type: 
#      type: array
#      items: File
#    source: "#sam_to_bam/output"
#              
#  - id: split_by_chromosome
#    type:
#      type: array
#      items: 
#        type: array
#        items: File
#    source: "#split_by_chromosome/output_bam_files"
#    
#  - id: fixed_bams
#    type: 
#      type: array
#      items: 
#        type: array
#        items: File
#    source: "#fix_all_bams/array_of_fixed_bams"
#    
#  - id: rearranged_bams
#    type: 
#      type: array
#      items: 
#        type: array
#        items: File
#    source: "#rearrange_bams/bam_arrays_per_chr"

#  - id: merged_bam
#    type: 
#      type: array
#      items: string
#    source: "#bam_merging/mergeSam_output"

#  - id: methylation_calls_simple
#    type:
#      type: array
#      items: string 
#    source: "#methylation_calling/methcall_bed"

  - id: methylation_calls
    type: File
    source: "#merge_meth_calls/merged_bed_file"

#  - id: lambda_bam_file
#    type: File
#    source: "#find_lambda_file/lambda_bam"

#  - id: methylation_calls_lambda
#    type: string
#    source: "#methylation_calling_lambda/methcall_bed"

  - id: bisulfite_conversion_estimation
    type: File
    source: "#conversion_estimation_lambda/bisulfite_conversion_file"

steps:

  - id: flag_stat_aligned
    run: "tools_string/samtools-flagstat.yml"
    scatter: "#flag_stat_aligned/input_bam_file"
    inputs:
      - { id: file_dir, source: "#temp_dir" }
      - { id: input_bam_file, source: "#input_bam_files" }
#      - { id: cleanup_check1, source: "#clean_trimmed_fastqs_1/output" }
#      - { id: cleanup_check2, source: "#clean_trimmed_fastqs_2/output" }
    outputs:
      - { id: output }
#
#  - id: sam_to_bam
#    run: "tools_string/samtools-view.yml"
#    scatter: "#sam_to_bam/input"
#    inputs:
#      - { id: input, source: "#alignment/alignment" }
#      - { id: isbam, default: "true"}
#      - id: output_name
#        source: "#alignment/alignment"
#        valueFrom:  $(inputs.input.substr(0, inputs.input.lastIndexOf('.'))).bam
#    outputs:
#      - { id: output }
#      
#  - id: clean_sams
#    run: "tools_string/cleanup.yml"
#    inputs:
#      - { id: files, source: "#alignment/alignment" }
#      - { id: data_dir, source: "#temp_dir"}
#      - { id: do_clean, source: "#clean_primary_sams"}
#      - { id: previous_step1, source: "#sam_to_bam/output" }
#      - { id: previous_step2, source: "#flag_stat_aligned/output" }
#    outputs:
#      - { id: output }

  - id: split_by_chromosome
    run: "tools_string/bamtools-split.yml"
    scatter: "#split_by_chromosome/input_bam_file"
    inputs:
      - {id: file_dir, source: "#temp_dir"}
      #- { id: input_bam_file, source: "#duplicates_removal/markDups_output" }
      #- { id: input_bam_file, source: "#bam_merging/mergeSam_output" }
      - { id: input_bam_file, source: "#input_bam_files" }
      - { id: split_options, default: "reference" }
      - { id: ref_prefix, source: "#chr_prefix" }
#      - { id: cleanup_check, source: "#clean_sams/output" }
    outputs:
      - { id: output_bam_files }
#      
#  - id: fix_bams
#    run: "tools_string/fix-bam-file.yml"
#    scatter: "#fix_bams/inputBAMFile"
#    inputs:
#      - id: inputBAMFile
#        source: "#split_by_chromosome/output_bam_files"
#      - id: outputFileName
#        source: "#split_by_chromosome/output_bam_files"
#        valueFrom: $(inputs.inputBAMFile.basename + '.fixed').bam
#    outputs:
#      - { id: fixBam_output }

#  - id: clean_bams
#    run: "tools_string/cleanup.yml"
#    inputs:
#      - { id: files, source: "#sam_to_bam/output" }
#      - { id: data_dir, source: "#temp_dir"}
#      - { id: do_clean, source: "#clean_primary_bams"}
#      - { id: previous_step, source: "#split_by_chromosome/output_bam_files" }
#    outputs:
#      - { id: output }

  - id: fix_all_bams
    run: "tools_string/fix-all-bam-files.yml"
    scatter: "#fix_all_bams/array_of_bams"
    inputs:
      - { id: file_dir, source: "#temp_dir" }
      - id: array_of_bams
        source: "#split_by_chromosome/output_bam_files"
#        valueFrom: $([self])
#      - { id: cleanup_check, source: "#clean_bams/output" }
    outputs: 
      - { id: array_of_fixed_bams }
      
  - id: clean_split_bams
    scatter: "#clean_split_bams/files"
    run: "tools_string/cleanup.yml"
    inputs:
      - { id: files, source: "#split_by_chromosome/output_bam_files" }
      - { id: data_dir, source: "#temp_dir"}
      - { id: do_clean, source: "#clean_chr_bams"}
      - { id: previous_step, source: "#fix_all_bams/array_of_fixed_bams" }
    outputs:
      - { id: output }

  - id: rearrange_bams
    run: "tools_string/rearrange_bams.yml"
    inputs:
      - id: bam_arrays
        source: "#fix_all_bams/array_of_fixed_bams"
      - id: chromosomes
        source: "#chromosomes"
      - { id: cleanup_check, source: "#clean_split_bams/output" }
    outputs:
      - { id: bam_arrays_per_chr }
      - { id: chrom_names}

  - id: bam_merging
    run: "tools_string/picard-MergeSamFiles.yml"
    scatter: [ "#bam_merging/inputFileName_mergedSam", "#bam_merging/outputFileName_mergedSam" ]
    scatterMethod: 'dotproduct'
    inputs:
      - { id: file_dir, source: "#temp_dir" }
      - id: inputFileName_mergedSam 
#        source: "#fix_bams/fixBam_output"
        source: "#rearrange_bams/bam_arrays_per_chr"
      - id: outputFileName_mergedSam
        source: "#rearrange_bams/chrom_names"
        valueFrom: ${ return inputs.file_dir + '/' + self + '_merged.bam'; }
    # - { id: tmpdir, valueFrom: $(runtime.tmpdir)} # does not work due to some reason
      - { id: tmpdir, source: "#temp_dir"}
      - { id: createIndex, default: "true" }
    outputs:
      - { id: mergeSam_output }

  - id: clean_fixed_bams
    scatter: "#clean_fixed_bams/files"
    run: "tools_string/cleanup.yml"
    inputs:
      - { id: files, source: "#fix_all_bams/array_of_fixed_bams" }
      - { id: data_dir, source: "#temp_dir" }
      - { id: do_clean, source: "#clean_chr_bams" }
      - { id: previous_step, source: "#bam_merging/mergeSam_output" }
    outputs:
      - { id: output }

  - id: index_bam_file
    run: "tools_string/samtools-index.yml"
    scatter: "#index_bam_file/input"
    inputs:
      - { id: file_dir, source: "#temp_dir" }
      - { id: input, source: "#bam_merging/mergeSam_output" }
      #- { id: bai, valueFrom: $(Boolean(1)) }
      - { id: bai, default: true }
      - { id: cleanup_check, source: "#clean_fixed_bams/output" }
    outputs:
      - { id: index }
  
#### OLD MERGING                  
#  - id: bam_merging
#    run: "tools_string/picard-MergeSamFiles.yml"
#    inputs:
#      - id: inputFileName_mergedSam 
#        source: "#alignment/alignment"
#      - { id: outputFileName_mergedSam, default: "merged_alignment.bam"}
#     # - { id: tmpdir, valueFrom: $(runtime.tmpdir)} # does not work due to some reason
#      - { id: tmpdir, default: "/ngs_share/tmp/"}
#      - { id: createIndex, default: "true" }
#    outputs:
#      - { id: mergeSam_output }
#                  
#  - id: duplicates_removal
#    run: "tools_string/picard-MarkDuplicates.yml"
#    inputs:
#      - id: inputFileName_markDups
#        source: "#bam_merging/mergeSam_output"
#        valueFrom: $([self])
#      - { id: outputFileName_markDups, valueFrom: "merged_alignment.bam" }
#      #- { id: tmpdir, valueFrom: $(runtime.tmpdir) }
#      - { id: tmpdir, valueFrom: "/ngs_share/tmp/"}
#      - { id: removeDuplicates, valueFrom: "true" }
#      - { id: createIndex, valueFrom: "true" }
#      - { id: metricsFile, valueFrom: "duplicate_metrics.txt"}
#    outputs:
#      - { id: markDups_output }

  - id: duplicates_removal
    run: "tools_string/picard-MarkDuplicates.yml"
    scatter: "#duplicates_removal/inputFileName_markDups"
    inputs:
#      - { id: file_dir, source: "#temp_dir" }
      - id: inputFileName_markDups
        #source: "#split_by_chromosome/output_bam_files"
        #source: "#fix_bams/fixBam_output"
        source: "#bam_merging/mergeSam_output"
        valueFrom: $([self])
      - id: outputFileName_markDups
        #source: "#split_by_chromosome/output_bam_files"
        source: "#bam_merging/mergeSam_output"
        valueFrom: $(inputs.inputFileName_markDups.substr(0, inputs.inputFileName_markDups.lastIndexOf('.')))_dupl_removed.bam
      - { id: tmpdir, source: "#temp_dir" }
      - { id: removeDuplicates, default: "true" }
      - id: metricsFile
        source: "#bam_merging/mergeSam_output"
        valueFrom: $(inputs.inputFileName_markDups.substr(0, inputs.inputFileName_markDups.lastIndexOf('.')))_duplicate_metrics.txt
      - { id: createIndex, default: "true" }
    outputs:
      - { id: markDups_output }
      
  - id: clean_merged_bams
    run: "tools_string/cleanup.yml"
    inputs:
      - { id: files, source: "#bam_merging/mergeSam_output" }
      - { id: data_dir, source: "#temp_dir" }
      - { id: do_clean, source: "#clean_merged_bams" }
      - { id: previous_step1, source: "#duplicates_removal/markDups_output" }
      - { id: previous_step2, source: "#index_bam_file/index" }
    outputs:
      - { id: output }
      
  - id: flag_stat_dup_removed
    run: "tools_string/samtools-flagstat.yml"
    scatter: "#flag_stat_dup_removed/input_bam_file"
    inputs:
      - { id: file_dir, source: "#temp_dir" }
      - { id: input_bam_file, source: "#duplicates_removal/markDups_output"}
    outputs:
      - { id: output }
      
  - id: mbias_calculation
    run: "tools_string/pileometh-mbias.yml"
    scatter: "#mbias_calculation/bam_file"
    inputs:
      - { id: bam_file, source: "#duplicates_removal/markDups_output" }#"#bam_merging/mergeSam_output"
#      - { id: bam_file, source: "#bam_merging/mergeSam_output" }
      - id: reference
        source: "#reference_fasta"
      - id: mbiasfile_name
        source: "#duplicates_removal/markDups_output"
        valueFrom: $(inputs.bam_file.substr(inputs.bam_file.lastIndexOf('/')+1, inputs.bam_file.lastIndexOf('.')))_mbias
    outputs:
      - { id: mbias_file }

  - id: mbias_calculation_trimmed
    run: "tools_string/methyldackel-mbias.yml"
    scatter: "#mbias_calculation_trimmed/bam_file"
    inputs:
      - { id: bam_file, source: "#duplicates_removal/markDups_output" }#"#bam_merging/mergeSam_output"
#      - { id: bam_file, source: "#bam_merging/mergeSam_output" }
      - id: reference
        source: "#reference_fasta"
      - id: mbiasfile_name
        source: "#duplicates_removal/markDups_output"
        valueFrom: $(inputs.bam_file.substr(inputs.bam_file.lastIndexOf('/')+1, inputs.bam_file.lastIndexOf('.')))_mbiasTrimmed
      - { id: OT, source: "#pileometh_ot"}
      - { id: OB,  source: "#pileometh_ob"}
      - { id: CTOT,  source: "#pileometh_ctot"}
      - { id: CTOB,  source: "#pileometh_ctob"}
      - { id: nOT, source: "#pileometh_not"}
      - { id: nOB,  source: "#pileometh_nob"}
      - { id: nCTOT,  source: "#pileometh_nctot"}
      - { id: nCTOB,  source: "#pileometh_nctob"}
    outputs:
      - { id: mbias_file }

  - id: methylation_calling
    run: "tools_string/pileometh-extract.yml"
    scatter: "#methylation_calling/bam_file"
    inputs:
      - { id: file_dir, source: "#temp_dir" }
      #- { id: bam_file, source: "#duplicates_removal/markDups_output" }
      - id: bam_file
        #source: "#split_by_chromosome/output_bam_files"
        source: "#duplicates_removal/markDups_output"
      - id: bedfile_name
        #source: "#split_by_chromosome/output_bam_files"
        source: "#duplicates_removal/markDups_output"
        valueFrom: $(inputs.bam_file.substr(inputs.bam_file.lastIndexOf('/')+1, inputs.bam_file.lastIndexOf('.')))        
      - id: reference
        source: "#reference_fasta"
      #- { id: noCG, valueFrom: $(Boolean(0)) }
      - { id: noCG, default: false }
      - { id: OT, source: "#pileometh_ot"}
      - { id: OB,  source: "#pileometh_ob"}
      - { id: CTOT,  source: "#pileometh_ctot"}
      - { id: CTOB,  source: "#pileometh_ctob"}
      - { id: nOT, source: "#pileometh_not"}
      - { id: nOB,  source: "#pileometh_nob"}
      - { id: nCTOT,  source: "#pileometh_nctot"}
      - { id: nCTOB,  source: "#pileometh_nctob"}
    outputs:
      - { id: methcall_bed }

  - id: merge_meth_calls
    run: "tools_string/methcall-merger.yml"
    inputs:
      - id: file_dir
        source: "#temp_dir"
      - id: input_bed_files
        source: "#methylation_calling/methcall_bed"
        valueFrom: $(prepend(self, inputs.file_dir))
      - id: output_file_name
        source: "#temp_dir"
        valueFrom: 'methylation_calls_CpG.bedGraph'
    outputs:
      - { id: merged_bed_file }
   
  - id: find_lambda_file
    run: "tools_string/find_lambda.yml"
    inputs:
      - { id: split_files, source: "#duplicates_removal/markDups_output" }
    outputs:
      - { id: lambda_bam } 
            
  - id: methylation_calling_lambda
    run: "tools_string/pileometh-extract.yml"
    inputs:
      - { id: file_dir, source: "#temp_dir" }
      - id: reference
        source: "#reference_fasta"
#        valueFrom: $(self)
#      - id: noCG
#        valueFrom: $(Boolean(1))
      - { id: noCG, default: true }
      - { id: bedfile_name, default: "lambda"}
      - { id: OT, source: "#pileometh_ot"}
      - { id: OB,  source: "#pileometh_ob"}
      - { id: CTOT,  source: "#pileometh_ctot"}
      - { id: CTOB,  source: "#pileometh_ctob"}
      - { id: nOT, source: "#pileometh_not"}
      - { id: nOB,  source: "#pileometh_nob"}
      - { id: nCTOT,  source: "#pileometh_nctot"}
      - { id: nCTOB,  source: "#pileometh_nctob"}
      - id: bam_file
        source: "#find_lambda_file/lambda_bam"
#      - id: bam_file
#        source: "#test_bam"
#        valueFrom: $([self])
#      - { id: bam_file, source: "#duplicates_removal/markDups_output" }
    outputs:
      - { id: methcall_bed }

  - id: clean_rmdup_bams
    run: "tools_string/cleanup.yml"
    inputs:
      - { id: files, source: "#duplicates_removal/markDups_output" }
      - { id: data_dir, source: "#temp_dir" }
      - { id: do_clean, source: "#clean_dup_rm_bams" }
      - { id: previous_step1, source: "#methylation_calling/methcall_bed" }
      - { id: previous_step2, source: "#methylation_calling_lambda/methcall_bed" }
    outputs:
      - { id: output }

  - id: conversion_estimation_lambda
    run: "tools_string/bisulfite-conversion-lambda.yml"
    inputs:
      - id: file_dir
        source: "#temp_dir"
      - id: input_bed_file
        source: "#methylation_calling_lambda/methcall_bed"
        valueFrom: $(inputs.file_dir + '/' + self)
      - id: output_file_name
        source: "#temp_dir"
        valueFrom: "bisulfite_conversion.txt"
    outputs:
      - { id: bisulfite_conversion_file }